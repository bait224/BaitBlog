@model PostEditViewModel

@{
    ViewBag.Title = "EditPost";
}

<div class="container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Edit Post</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.PostedOn)
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @name = "title", @id = "title" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UrlSlug, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UrlSlug, new { htmlAttributes = new { @class = "form-control", @name = "slug", @id = "slug", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.UrlSlug, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.ShortDescription, new { @class = "form-control", @style = "width:100%", @rows = "3", @id = "short-description" } )
                    @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.LabelFor(model => model.Published, htmlAttributes: new { @class = "control-label mr-3" })
                        @Html.EditorFor(model => model.Published)
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="input-group col-md-10 mb-3">
                    @Html.DropDownListFor(model => model.CategoryId, new SelectList(Model.Categories, "Value", "Text"),  new { @class = "form-control", @id = "CateList" } )
                    <div class="input-group-append">
                        <button class="btn btn-secondary pt-0 pb-0" type="button" data-toggle="modal" data-target="#ModalAddCategory" onclick="AddNewCategory();">+</button>
                    </div>
                </div>
                <div class="col-md-10 mb-3">
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TagsIdSeleted, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="input-group col-md-10 mb-3">
                    @Html.ListBoxFor(m => m.TagsIdSeleted, new MultiSelectList(Model.ListTags, "Value", "Text", Model.ListTags.Select(x => x.Value)), new { @class = "form-control features-segments select2-multiselect-checkbox", @id = "tag-list", @multiple = "multiple" })
                    <div class="input-group-append">
                        <button class="btn btn-secondary pt-0 pb-0" type="button" data-toggle="modal" data-target="#ModalAddTag" onclick="CreateNewTag();">+</button>
                    </div>
                </div>
                <div class="col-md-10 mb-3">
                    @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PostContent, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.PostContent, new { @class = "form-control ckeditor", @name = "content", @style = "width:100%", @rows = "3", @id = "content" })
                    @Html.ValidationMessageFor(model => model.PostContent, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
   
@section Scripts {
    <script type="text/javascript">
        $("#tag-list").select2();
        $("#CateList").select2();

        function gettoken() {
            var token = '@Html.AntiForgeryToken()';
            token = $(token).val();
            return token;
        }

        function ChangeToSlug(title)
        {
            var slug;

            slug = title.toLowerCase();

            slug = slug.replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a');
            slug = slug.replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e');
            slug = slug.replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i');
            slug = slug.replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o');
            slug = slug.replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u');
            slug = slug.replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y');
            slug = slug.replace(/đ/gi, 'd');

            slug = slug.replace(/[&\/\\#,+()$~%.'":*?<>{}_]/gi, '');

            slug = slug.replace(/ /gi, "-");

            slug = slug.replace(/\-\-\-\-\-/gi, '-');
            slug = slug.replace(/\-\-\-\-/gi, '-');
            slug = slug.replace(/\-\-\-/gi, '-');
            slug = slug.replace(/\-\-/gi, '-');

            slug = 'y' + slug + 'y';
            slug = slug.replace(/\y\-|\-\y|\y/gi, '');

            return slug;
        };

        function AddNewCategory() {
            $.confirm({
                title: 'Create new category!',
                content: '' +
                '<form action="" class="formName">' +
                '<div class="form-group">' +
                '<label>Name</label>' +
                '<input type="text" placeholder="Category name" class="name form-control" name ="title" id="title" required />' +
                '</div>' +
                '<div class="form-group">' +
                '<label>Url Slug</label>' +
                '<input type="text"  class="slug form-control" id="slug" name="slug" readonly required />' +
                '</div>' +
                '<div class="form-group">' +
                '<label>Description</label>' +
                '<input type="text"  class="desc form-control" id="description" />' +
                '</div>' +
                '</form>'
                ,
                buttons: {
                    formSubmit: {
                        text: 'Create',
                        btnClass: 'btn-blue',
                        action: function () {
                            var name = this.$content.find('.name').val();
                            var urlSlug = this.$content.find('.slug').val();
                            var Desc = this.$content.find('.desc').val();
                            var Drl = $("#CateList");

                            if (name && urlSlug) {
                                $.ajax({
                                    type: "POST",
                                    url: "@Url.Action("QuickAddCategory", "CategoryManagement", new { area = "Admin"})",
                                    dataType: "json",
                                    data: {
                                        __RequestVerificationToken: gettoken(),
                                        categoryViewModel: {
                                            Name: name,
                                            UrlSlug: urlSlug,
                                            Description: Desc
                                        }
                                    },
                                    success: function (res) {
                                        if (res != null) {
                                            $.each(res, function (index, item) {
                                                var p = new Option(item.Text, item.Value, false, true);
                                                Drl.append(p);
                                            });
                                        }


                                        $.alert({
                                            title: 'Alert!',
                                            content: "Create success"
                                        });
                                    },
                                    error: function () {
                                        $.alert("Create error");
                                    }
                                });
                            }
                            else {
                                $.alert('Please enter a valid name');
                                return false;
                            }
                        }
                    },
                    cancel: function () {
                        //close
                    }
                },
                onContentReady: function () {

                    var jc = this;
                    this.$content.find('form').on('submit', function (e) {
                        e.preventDefault();
                        jc.$$formSubmit.trigger('click');
                    });

                    this.$content.find('.name').keyup(function (event) {
                        var title = jc.$content.find('.name').val();
                        var slug = ChangeToSlug(title);
                        jc.$content.find('.slug').val(slug);
                    });
                }
            });
        };

        function CreateNewTag() {
            $.confirm({
                title: 'Create new tag!',
                content: '' +
                '<form action="" class="formName">' +
                '<div class="form-group">' +
                '<label>Name</label>' +
                '<input type="text" placeholder="Tag name" class="name form-control" name ="title" id="title" required />' +
                '</div>' +
                '<div class="form-group">' +
                '<label>Url Slug</label>' +
                '<input type="text"  class="slug form-control" id="slug" name="slug" readonly required />' +
                '</div>' +
                '<div class="form-group">' +
                '<label>Description</label>' +
                '<input type="text"  class="desc form-control" id="description" />' +
                '</div>' +
                '</form>'
                ,
                buttons: {
                    formSubmit: {
                        text: 'Create',
                        btnClass: 'btn-blue',
                        action: function () {
                            var name = this.$content.find('.name').val();
                            var urlSlug = this.$content.find('.slug').val();
                            var Desc = this.$content.find('.desc').val();
                            var Drl = $("#tag-list");

                            if (name && urlSlug) {
                                $.ajax({
                                    type: "POST",
                                    url: "@Url.Action("QuickAddTag", "TagsManagement", new { area = "Admin"})",
                                    dataType: "json",
                                    data: {
                                        __RequestVerificationToken: gettoken(),
                                        tagViewModel: {
                                            Name: name,
                                            UrlSlug: urlSlug,
                                            Description: Desc
                                        }
                                    },
                                    success: function (res) {
                                        if (res != null) {
                                            $.each(res, function (index, item) {
                                                var p = new Option(item.Text, item.Value, false, true);
                                                Drl.append(p);
                                            });
                                        }


                                        $.alert({
                                            title: 'Alert!',
                                            content: "Create success"
                                        });
                                    },
                                    error: function () {
                                        $.alert("Create error");
                                    }
                                });
                            }
                            else {
                                $.alert('Please enter a valid name');
                                return false;
                            }
                        }
                    },
                    cancel: function () {
                        //close
                    }
                },
                onContentReady: function () {

                    var jc = this;
                    this.$content.find('form').on('submit', function (e) {
                        e.preventDefault();
                        jc.$$formSubmit.trigger('click');
                    });

                    this.$content.find('.name').keyup(function (event) {
                        var title = jc.$content.find('.name').val();
                        var slug = ChangeToSlug(title);
                        jc.$content.find('.slug').val(slug);
                    });
                }
            });
        }
    </script>
}